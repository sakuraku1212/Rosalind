# -*- coding: utf-8 -*-
"""Interleaving Two Motifs.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qvz_M0mD3qDGImw0PPJOVNoDDtG4ctMT

Interleaving Two Motifs   https://rosalind.info/problems/scsp/

---

Shortest Common Supersequence
"""

from google.colab import drive
drive.mount('/content/drive')

#data=open('/content/drive/MyDrive/Colab_Notebooks/Rosalind/Sample_Dataset/Interleaving_Two_Motifs.txt') #small test data
data=open('/content/drive/MyDrive/Colab_Notebooks/Rosalind/Dataset/rosalind_scsp.txt')  #data for submission
data=data.read().split('\n')
data

s1=data[0]
s1

s2=data[1]
s2

#use two strings to create a 2D array and compare each character, if same diagonal+1ï¼Œ else take max(max(matrix[n+1][m], matrix[n][m+1])
import numpy as np

matrix=np.zeros((len(s2)+1, len(s1)+1),dtype=int)

for m in range(len(s1)): #length 7
  for n in range(len(s2)): #length 6
    if s2[n]==s1[m]:
      (matrix[n+1][m+1]) = matrix[n][m] + 1
    else:
      matrix[n+1][m+1]=max(matrix[n+1][m], matrix[n][m+1])
lcs_len= matrix[len(s2)][len(s1)]

lcs_len

#generate the 2D array based on LCS, and backforward to store the SCS

scs=''
m=len(s1)  #s1=ATCTGAT, 7
n=len(s2)   #s2=TGCATA, 6
while m >0 and n>0:
  if s1[m-1]==s2[n-1]:
    scs+=s1[m-1]
    m = m-1
    n = n-1
  elif matrix[n-1][m]>matrix[n][m-1]:
    scs+=s2[n-1]
    n -= 1
  else:
    scs+=s1[m-1]
    m -= 1

#once it stop, store the rest of the character to SCS to get the final SCS
while m>0:
  scs+=s1[m-1]
  m -= 1

while n>0:
  scs+=s2[n-1]
  n -= 1

scs = scs[::-1]
scs